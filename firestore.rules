rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // Helper Functions
    // ========================================

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getRole() {
      return isAuthenticated() && 'role' in request.auth.token ? request.auth.token.role : 'guest';
    }

    function hasRole(role) {
      return getRole() == role;
    }

    function belongsToFranchise(franchiseId) {
      return isAuthenticated() && 'franchiseId' in request.auth.token && request.auth.token.franchiseId == franchiseId;
    }

    function isSuperAdmin() {
      return hasRole('super_admin');
    }

    function isFranchiseOwner() {
      return hasRole('franchise_owner');
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function isBarber() {
      return hasRole('barber');
    }

    function isClient() {
      return hasRole('client') || hasRole('guest');
    }

    function isGuest() {
      return getRole() == 'guest';
    }

    // ========================================
    // Users Collection
    // ========================================

    match /users/{userId} {
      // Read: usuario mismo, o staff de franquicia si tiene relación
      allow read: if isOwner(userId) || isSuperAdmin() || isFranchiseOwner() || isAdmin();

      // Create: solo al crear cuenta (auth uid == doc id)
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Update: usuario mismo (campos no sensibles), o admins (para roles)
      allow update: if isOwner(userId) &&
                       !request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['role', 'franchiseId', 'queuePoints'])
                    || isSuperAdmin()
                    || isFranchiseOwner();

      // Delete: solo super admin
      allow delete: if isSuperAdmin();

      // Subcollections
      match /fcmTokens/{tokenId} {
        allow read, write: if isOwner(userId);
      }

      match /queuePenalties/{penaltyId} {
        allow read: if isOwner(userId) || isSuperAdmin() || isFranchiseOwner();
        allow write: if false; // Solo Cloud Functions
      }

      match /notificationPreferences/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    // ========================================
    // Franchises Collection
    // ========================================

    match /franchises/{franchiseId} {
      // Read: cualquier usuario autenticado (para ver info de franquicias)
      allow read: if isAuthenticated();

      // Create: solo super admin o usuarios autenticados (para crear su propia franquicia)
      allow create: if isAuthenticated() &&
                       (isSuperAdmin() || request.resource.data.ownerUserId == request.auth.uid);

      // Update: owner de franquicia, super admin, o staff de franquicia
      allow update: if (isFranchiseOwner() && belongsToFranchise(franchiseId)) ||
                       isSuperAdmin() ||
                       (isAuthenticated() && resource.data.ownerUserId == request.auth.uid);

      // Delete: solo super admin o owner
      allow delete: if isSuperAdmin() ||
                       (isAuthenticated() && resource.data.ownerUserId == request.auth.uid);
    }

    // ========================================
    // Branches Collection
    // ========================================

    match /branches/{branchId} {
      // Read: público (para que clientes vean sucursales disponibles)
      allow read: if true;

      // Create: usuarios autenticados
      allow create: if isAuthenticated();

      // Update/Delete: staff de la franquicia, super admin, o cualquier usuario autenticado (para testing)
      allow update, delete: if isAuthenticated() &&
                               (belongsToFranchise(resource.data.franchiseId) || isSuperAdmin() || isGuest());
    }

    // ========================================
    // Barbers Collection
    // ========================================

    match /barbers/{barberId} {
      // Read: público (ver barberos disponibles)
      allow read: if true;

      // Create: usuarios autenticados
      allow create: if isAuthenticated();

      // Update/Delete: staff de franquicia, super admin, o cualquier usuario autenticado (para testing)
      allow update, delete: if isAuthenticated() &&
                               (belongsToFranchise(resource.data.franchiseId) || isSuperAdmin() || isGuest());
    }

    // ========================================
    // Services Collection
    // ========================================

    match /services/{serviceId} {
      // Read: público
      allow read: if true;

      // Create: usuarios autenticados
      allow create: if isAuthenticated();

      // Update/Delete: staff de franquicia, super admin, o cualquier usuario autenticado (para testing)
      allow update, delete: if isAuthenticated() &&
                               (belongsToFranchise(resource.data.franchiseId) || isSuperAdmin() || isGuest());
    }

    // ========================================
    // Queue Collection (CRÍTICA - Real-time)
    // ========================================

    match /queue/{queueId} {
      // Read: cliente (su propio doc), staff de sucursal, super admin
      allow read: if isOwner(resource.data.userId)
                  || belongsToFranchise(resource.data.franchiseId)
                  || isSuperAdmin();

      // Write: SOLO Cloud Functions (validaciones complejas server-side)
      allow write: if false;
    }

    // ========================================
    // Appointments Collection
    // ========================================

    match /appointments/{appointmentId} {
      // Read: cliente (sus turnos), staff sucursal
      allow read: if isOwner(resource.data.userId)
                  || belongsToFranchise(resource.data.franchiseId)
                  || isSuperAdmin();

      // Create: cliente autenticado (crear su propio turno)
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;

      // Update: cliente (cancelar), staff (actualizar status)
      allow update: if isOwner(resource.data.userId)
                    || belongsToFranchise(resource.data.franchiseId)
                    || isSuperAdmin();

      // Delete: solo super admin
      allow delete: if isSuperAdmin();
    }

    // ========================================
    // Notifications Collection
    // ========================================

    match /notifications/{notificationId} {
      // Read: usuario destinatario
      allow read: if isOwner(resource.data.userId);

      // Write: solo Cloud Functions
      allow write: if false;
    }

    // ========================================
    // Loyalty Transactions Collection
    // ========================================

    match /loyaltyTransactions/{transactionId} {
      // Read: usuario, super admin, franchise owner
      allow read: if isOwner(resource.data.userId) || isSuperAdmin() || isFranchiseOwner();

      // Write: solo Cloud Functions
      allow write: if false;
    }

    // ========================================
    // Payments Collection (Stripe)
    // ========================================

    match /payments/{paymentId} {
      // Read: usuario, staff franquicia, super admin
      allow read: if isOwner(resource.data.userId)
                  || belongsToFranchise(resource.data.franchiseId)
                  || isSuperAdmin();

      // Write: solo Cloud Functions (seguridad crítica)
      allow write: if false;
    }

    // ========================================
    // Default: Deny all
    // ========================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
